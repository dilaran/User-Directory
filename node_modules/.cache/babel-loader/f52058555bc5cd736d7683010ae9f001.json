{"ast":null,"code":"var _jsxFileName = \"/Users/dn/User-Directory/src/App.js\";\nimport React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      friends\n    };\n\n    this.remoteEmployee = id => {\n      const friends = this.state.friends.filter(friend => friend.remote !== \"no\");\n      this.setState({\n        friends\n      });\n    };\n\n    this.sortEmployee = id => {\n      function compare(a, b) {\n        const payA = a.pay;\n        const payB = b.pay;\n        let comparison = 0;\n\n        if (payA < payB) {\n          comparison = 1;\n        } else if (payA > payB) {\n          comparison = -1;\n        }\n\n        return comparison;\n      }\n\n      friends.sort(compare);\n      this.setState({\n        friends\n      });\n    };\n  }\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Friends List\"), this.state.friends.map(friend => React.createElement(FriendCard, {\n      id: friend.id,\n      key: friend.id,\n      name: friend.name,\n      image: friend.image,\n      occupation: friend.occupation,\n      location: friend.location,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App; //make button that shows only remote employees\n//const remote = friends.filter(friend => friend.remote !== \"no\");\n//console.log(remote)\n//make button that orders employees by salary\n// class App extends Component {\n//   state = {\n//     friends\n//   };\n//\n//   render() {\n//     return (\n//       <Wrapper>\n//         <Title\n//         remoteEmployee={this.remoteEmployee}\n//         sortEmployee = {this.sortEmployee}\n//          />\n//         {this.state.friends.map(friend => (\n//           <FriendCard\n//             id={friend.id}\n//             key={friend.id}\n//             name={friend.name}\n//             image={friend.image}\n//             position={friend.position}\n//             payType={friend.payType}\n//             remote={friend.remote}\n//             pay={friend.pay}\n//           />\n//         ))}\n//       </Wrapper>","map":{"version":3,"sources":["/Users/dn/User-Directory/src/App.js"],"names":["React","Component","FriendCard","Wrapper","Title","friends","App","state","remoteEmployee","id","filter","friend","remote","setState","sortEmployee","compare","a","b","payA","pay","payB","comparison","sort","render","map","name","image","occupation","location"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BM,KAF0B,GAElB;AACNF,MAAAA;AADM,KAFkB;;AAAA,SAM1BG,cAN0B,GAMTC,EAAE,IAAI;AACjB,YAAMJ,OAAO,GAAG,KAAKE,KAAL,CAAWF,OAAX,CAAmBK,MAAnB,CAA0BC,MAAM,IAAIA,MAAM,CAACC,MAAP,KAAkB,IAAtD,CAAhB;AACA,WAAKC,QAAL,CAAc;AAAER,QAAAA;AAAF,OAAd;AACD,KATqB;;AAAA,SAUtBS,YAVsB,GAUPL,EAAE,IAAI;AACnB,eAASM,OAAT,CAAiBC,CAAjB,EAAoBC,CAApB,EAAsB;AACpB,cAAMC,IAAI,GAAGF,CAAC,CAACG,GAAf;AACA,cAAMC,IAAI,GAAGH,CAAC,CAACE,GAAf;AACA,YAAIE,UAAU,GAAG,CAAjB;;AACA,YAAIH,IAAI,GAAGE,IAAX,EAAiB;AACfC,UAAAA,UAAU,GAAG,CAAb;AACD,SAFD,MAEO,IAAIH,IAAI,GAAGE,IAAX,EAAiB;AACtBC,UAAAA,UAAU,GAAG,CAAC,CAAd;AACD;;AACD,eAAOA,UAAP;AACD;;AACDhB,MAAAA,OAAO,CAACiB,IAAR,CAAaP,OAAb;AACA,WAAKF,QAAL,CAAc;AAAER,QAAAA;AAAF,OAAd;AACD,KAxBqB;AAAA;;AA0B1B;AACAkB,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEG,KAAKhB,KAAL,CAAWF,OAAX,CAAmBmB,GAAnB,CAAuBb,MAAM,IAC5B,oBAAC,UAAD;AAEE,MAAA,EAAE,EAAEA,MAAM,CAACF,EAFb;AAGE,MAAA,GAAG,EAAEE,MAAM,CAACF,EAHd;AAIE,MAAA,IAAI,EAAEE,MAAM,CAACc,IAJf;AAKE,MAAA,KAAK,EAAEd,MAAM,CAACe,KALhB;AAME,MAAA,UAAU,EAAEf,MAAM,CAACgB,UANrB;AAOE,MAAA,QAAQ,EAAEhB,MAAM,CAACiB,QAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CAFH,CADF;AAgBD;;AA5CyB;;AA+C5B,eAAetB,GAAf,C,CAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends\n  };\n\n  remoteEmployee = id => {\n        const friends = this.state.friends.filter(friend => friend.remote !== \"no\");\n        this.setState({ friends });\n      };\n      sortEmployee = id => {\n        function compare(a, b){\n          const payA = a.pay;\n          const payB = b.pay;\n          let comparison = 0;\n          if (payA < payB) {\n            comparison = 1;\n          } else if (payA > payB) {\n            comparison = -1;\n          }\n          return comparison;\n        }\n        friends.sort(compare);\n        this.setState({ friends });\n      };\n    \n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Title>Friends List</Title>\n        {this.state.friends.map(friend => (\n          <FriendCard\n            \n            id={friend.id}\n            key={friend.id}\n            name={friend.name}\n            image={friend.image}\n            occupation={friend.occupation}\n            location={friend.location}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n\n\n\n//make button that shows only remote employees\n//const remote = friends.filter(friend => friend.remote !== \"no\");\n//console.log(remote)\n//make button that orders employees by salary\n\n// class App extends Component {\n//   state = {\n//     friends\n//   };\n\n//\n//   render() {\n//     return (\n//       <Wrapper>\n//         <Title\n//         remoteEmployee={this.remoteEmployee}\n//         sortEmployee = {this.sortEmployee}\n//          />\n//         {this.state.friends.map(friend => (\n//           <FriendCard\n            \n//             id={friend.id}\n//             key={friend.id}\n//             name={friend.name}\n//             image={friend.image}\n//             position={friend.position}\n//             payType={friend.payType}\n//             remote={friend.remote}\n//             pay={friend.pay}\n//           />\n//         ))}\n//       </Wrapper>"]},"metadata":{},"sourceType":"module"}