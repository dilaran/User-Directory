{"ast":null,"code":"var _jsxFileName = \"/Users/dn/User-Directory/src/App.js\";\nimport React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      friends\n    };\n  }\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"Friends List\"), this.state.friends.map(friend => React.createElement(FriendCard, {\n      id: friend.id,\n      key: friend.id,\n      name: friend.name,\n      image: friend.image,\n      occupation: friend.occupation,\n      location: friend.location,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App; //make button that shows only remote employees\n//const remote = friends.filter(friend => friend.remote !== \"no\");\n//console.log(remote)\n//make button that orders employees by salary\n// class App extends Component {\n//   state = {\n//     friends\n//   };\n//   remoteEmployee = id => {\n//     const friends = this.state.friends.filter(friend => friend.remote !== \"no\");\n//     this.setState({ friends });\n//   };\n//   sortEmployee = id => {\n//     function compare(a, b){\n//       const payA = a.pay;\n//       const payB = b.pay;\n//       let comparison = 0;\n//       if (payA < payB) {\n//         comparison = 1;\n//       } else if (payA > payB) {\n//         comparison = -1;\n//       }\n//       return comparison;\n//     }\n//     friends.sort(compare);\n//     this.setState({ friends });\n//   };\n//   render() {\n//     return (\n//       <Wrapper>\n//         <Title\n//         remoteEmployee={this.remoteEmployee}\n//         sortEmployee = {this.sortEmployee}\n//          />\n//         {this.state.friends.map(friend => (\n//           <FriendCard\n//             id={friend.id}\n//             key={friend.id}\n//             name={friend.name}\n//             image={friend.image}\n//             position={friend.position}\n//             payType={friend.payType}\n//             remote={friend.remote}\n//             pay={friend.pay}\n//           />\n//         ))}\n//       </Wrapper>","map":{"version":3,"sources":["/Users/dn/User-Directory/src/App.js"],"names":["React","Component","FriendCard","Wrapper","Title","friends","App","state","render","map","friend","id","name","image","occupation","location"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BM,KAF0B,GAElB;AACNF,MAAAA;AADM,KAFkB;AAAA;;AAO1B;AACAG,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEG,KAAKD,KAAL,CAAWF,OAAX,CAAmBI,GAAnB,CAAuBC,MAAM,IAC5B,oBAAC,UAAD;AAEE,MAAA,EAAE,EAAEA,MAAM,CAACC,EAFb;AAGE,MAAA,GAAG,EAAED,MAAM,CAACC,EAHd;AAIE,MAAA,IAAI,EAAED,MAAM,CAACE,IAJf;AAKE,MAAA,KAAK,EAAEF,MAAM,CAACG,KALhB;AAME,MAAA,UAAU,EAAEH,MAAM,CAACI,UANrB;AAOE,MAAA,QAAQ,EAAEJ,MAAM,CAACK,QAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CAFH,CADF;AAgBD;;AAzByB;;AA4B5B,eAAeT,GAAf,C,CAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends\n  };\n\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Title>Friends List</Title>\n        {this.state.friends.map(friend => (\n          <FriendCard\n            \n            id={friend.id}\n            key={friend.id}\n            name={friend.name}\n            image={friend.image}\n            occupation={friend.occupation}\n            location={friend.location}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n\n\n\n//make button that shows only remote employees\n//const remote = friends.filter(friend => friend.remote !== \"no\");\n//console.log(remote)\n//make button that orders employees by salary\n\n// class App extends Component {\n//   state = {\n//     friends\n//   };\n\n//   remoteEmployee = id => {\n//     const friends = this.state.friends.filter(friend => friend.remote !== \"no\");\n//     this.setState({ friends });\n//   };\n//   sortEmployee = id => {\n//     function compare(a, b){\n//       const payA = a.pay;\n//       const payB = b.pay;\n//       let comparison = 0;\n//       if (payA < payB) {\n//         comparison = 1;\n//       } else if (payA > payB) {\n//         comparison = -1;\n//       }\n//       return comparison;\n//     }\n//     friends.sort(compare);\n//     this.setState({ friends });\n//   };\n\n//   render() {\n//     return (\n//       <Wrapper>\n//         <Title\n//         remoteEmployee={this.remoteEmployee}\n//         sortEmployee = {this.sortEmployee}\n//          />\n//         {this.state.friends.map(friend => (\n//           <FriendCard\n            \n//             id={friend.id}\n//             key={friend.id}\n//             name={friend.name}\n//             image={friend.image}\n//             position={friend.position}\n//             payType={friend.payType}\n//             remote={friend.remote}\n//             pay={friend.pay}\n//           />\n//         ))}\n//       </Wrapper>"]},"metadata":{},"sourceType":"module"}